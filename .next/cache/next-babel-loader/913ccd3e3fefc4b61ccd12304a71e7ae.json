{"ast":null,"code":"var _jsxFileName = \"D:\\\\Works\\\\customer\\\\nextjs-blog\\\\pages\\\\search\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport Layout from \"../../layout\";\nimport Breadcrumbs from '../../components/breadcrumbs';\nimport Toolbox from \"../../components/toolbox\";\nimport { title as style_title } from './index.module.css';\nimport { API_KEY, HOST } from \"../../constants\";\nimport { asyncForEach } from \"../../helpers\";\nimport api from \"../../server\";\nimport FilmCard from \"../../components/filmCard\";\n\nconst Search = ({}) => {\n  const {\n    0: path,\n    1: setPath\n  } = useState(\"/\");\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState(\"\");\n  const {\n    0: toolBoxSearchValue,\n    1: setToolBoxSearchValue\n  } = useState(\"\");\n  const {\n    0: err,\n    1: setErr\n  } = useState(null);\n  const {\n    0: searchedFilms,\n    1: setSearchedFilms\n  } = useState([]);\n  useEffect(() => {\n    setPath(window.location.pathname);\n\n    const _searchText = window.location.search.replace(\"?s=\", \"\").replace(/%20/g, \" \");\n\n    setSearchText(_searchText);\n    const mainParameters = {\n      apikey: API_KEY,\n      type: 'movie',\n      r: 'json',\n      s: _searchText\n    };\n    const mainQuery = new URLSearchParams(mainParameters);\n    api({\n      url: HOST + '?' + mainQuery\n    }).then(async res => {\n      if (res.Response === 'True') {\n        let fullyData = [];\n        await asyncForEach(res.Search, async item => {\n          const itemParameters = {\n            apikey: API_KEY,\n            plot: 'short',\n            type: 'movie',\n            r: 'json',\n            i: item.imdbID\n          };\n          const itemQuery = new URLSearchParams(itemParameters);\n          const response = await api({\n            url: HOST + '?' + itemQuery\n          });\n          let itemData = JSON.parse(JSON.stringify(response));\n          fullyData.push(itemData);\n        });\n        setSearchedFilms(fullyData);\n      } else {\n        setErr({\n          message: res['Error']\n        });\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n  }, []);\n  useEffect(() => {\n    setPath(window.location.pathname);\n  });\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }\n  }, __jsx(Breadcrumbs, {\n    data: [{\n      title: \"Home\",\n      url: \"/\"\n    }, {\n      title: \"Search results for \" + searchText.toString(),\n      selected: true\n    }],\n    path: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      display: \"table\",\n      marginTop: 20,\n      marginBottom: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"table-cell\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      paddingLeft: \"10%\",\n      paddingRight: \"10%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, __jsx(Toolbox, {\n    position: \"relative\",\n    button: {\n      label: \"Search\",\n      props: {\n        variant: \"contained\",\n        color: \"primary\"\n      }\n    },\n    search: {\n      value: toolBoxSearchValue,\n      onChange: e => setToolBoxSearchValue(e.target.value)\n    },\n    year: {\n      key: \"toolboxYear\",\n      id: \"dropdown-item-button\",\n      title: \"Year\",\n      data: [{\n        value: \"Any\",\n        default: true\n      }, {\n        value: \"2019\"\n      }, {\n        value: \"2020\"\n      }]\n    },\n    type: {\n      key: \"toolboxType\",\n      id: \"dropdown-item-button\",\n      title: \"Type\",\n      data: [{\n        value: \"Any\",\n        default: true\n      }, {\n        value: \"Series\"\n      }, {\n        value: \"Movie\"\n      }, {\n        value: \"Episode\"\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  })))), __jsx(\"div\", {\n    style: {\n      flexDirection: \"column\",\n      paddingRight: \"10%\",\n      paddingLeft: \"10%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    className: style_title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, \"Search result for \", __jsx(\"span\", {\n    style: {\n      color: \"goldenrod\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 59\n    }\n  }, searchText)), searchedFilms && searchedFilms.length ? searchedFilms.map((film, filmIndex) => {\n    return __jsx(FilmCard, {\n      imdbID: film.imdbID,\n      index: filmIndex,\n      title: film.Title,\n      image: film.Poster,\n      content: film.Plot,\n      imdbPoint: film.imdbRating,\n      key: \"film-\" + filmIndex,\n      year: film.Year,\n      style: {\n        marginLeft: 0,\n        marginRight: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 32\n      }\n    });\n  }) : err ? err.message : __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      paddingTop: 40,\n      paddingBottom: 40,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      fontFamily: 'Poppins'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 39\n    }\n  }, \"Y\\xFCkleniyor...\")));\n};\n\nexport default Search;","map":{"version":3,"sources":["D:/Works/customer/nextjs-blog/pages/search/index.js"],"names":["useEffect","useState","Layout","Breadcrumbs","Toolbox","title","style_title","API_KEY","HOST","asyncForEach","api","FilmCard","Search","path","setPath","searchText","setSearchText","toolBoxSearchValue","setToolBoxSearchValue","err","setErr","searchedFilms","setSearchedFilms","window","location","pathname","_searchText","search","replace","mainParameters","apikey","type","r","s","mainQuery","URLSearchParams","url","then","res","Response","fullyData","item","itemParameters","plot","i","imdbID","itemQuery","response","itemData","JSON","parse","stringify","push","message","catch","alert","toString","selected","width","display","marginTop","marginBottom","paddingLeft","paddingRight","label","props","variant","color","value","onChange","e","target","key","id","data","default","flexDirection","length","map","film","filmIndex","Title","Poster","Plot","imdbRating","Year","marginLeft","marginRight","paddingTop","paddingBottom","justifyContent","alignItems","fontFamily"],"mappings":"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","sourcesContent":["import {\r\n    useEffect,\r\n    useState\r\n} from \"react\";\r\nimport Layout from \"../../layout\";\r\nimport Breadcrumbs from '../../components/breadcrumbs';\r\nimport Toolbox from \"../../components/toolbox\";\r\nimport {\r\n    title as style_title\r\n} from './index.module.css';\r\nimport {\r\n    API_KEY,\r\n    HOST\r\n} from \"../../constants\";\r\nimport {\r\n    asyncForEach\r\n} from \"../../helpers\";\r\nimport api from \"../../server\";\r\nimport FilmCard from \"../../components/filmCard\";\r\n\r\nconst Search = ({\r\n\r\n}) => {\r\n    const [path, setPath] = useState(\"/\");\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [toolBoxSearchValue, setToolBoxSearchValue] = useState(\"\");\r\n    const [err, setErr] = useState(null);\r\n    const [searchedFilms, setSearchedFilms] = useState([]);\r\n    useEffect(() => {\r\n        setPath(window.location.pathname);\r\n        const _searchText = window.location.search.replace(\"?s=\", \"\").replace(/%20/g, \" \");\r\n        setSearchText(_searchText);\r\n        const mainParameters = {\r\n\t\t\tapikey: API_KEY,\r\n\t\t\ttype: 'movie',\r\n\t\t\tr: 'json',\r\n\t\t\ts: _searchText\r\n\t\t};\r\n\t\tconst mainQuery = new URLSearchParams(mainParameters);\r\n\t\tapi({\r\n\t\t\turl: HOST + '?' + mainQuery\r\n\t\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (res.Response === 'True') {\r\n\t\t\t\tlet fullyData = [];\r\n\t\t\t\tawait asyncForEach(res.Search, async (item) => {\r\n\t\t\t\t\tconst itemParameters = {\r\n\t\t\t\t\t\tapikey: API_KEY,\r\n\t\t\t\t\t\tplot: 'short',\r\n\t\t\t\t\t\ttype: 'movie',\r\n\t\t\t\t\t\tr: 'json',\r\n\t\t\t\t\t\ti: item.imdbID\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst itemQuery = new URLSearchParams(itemParameters);\r\n\t\t\t\t\tconst response = await api({\r\n\t\t\t\t\t\turl: HOST + '?' + itemQuery\r\n\t\t\t\t\t});\r\n                    let itemData = JSON.parse(JSON.stringify(response));\r\n\t\t\t\t\tfullyData.push(itemData);\r\n                });\r\n\t\t\t\tsetSearchedFilms(fullyData);\r\n\t\t\t} else {\r\n\t\t\t\tsetErr({\r\n\t\t\t\t\tmessage: res['Error']\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\talert(err.message);\r\n\t\t});\r\n    }, []);\r\n    useEffect(() => {\r\n        setPath(window.location.pathname);\r\n    });\r\n    return <Layout>\r\n        <Breadcrumbs\r\n            data={[\r\n                {\r\n                    title: \"Home\",\r\n                    url: \"/\"\r\n                },\r\n                {\r\n                    title: \"Search results for \" + searchText.toString(),\r\n                    selected: true\r\n                }\r\n            ]}\r\n            path={path}\r\n        />\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                display: \"table\",\r\n                marginTop: 20,\r\n                marginBottom: 40\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    display: \"table-cell\"\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        paddingLeft: \"10%\",\r\n                        paddingRight: \"10%\",\r\n                    }}\r\n                >\r\n                    <Toolbox\r\n                        position=\"relative\"\r\n                        button={{\r\n                            label: \"Search\",\r\n                            props: {\r\n                                variant: \"contained\",\r\n                                color: \"primary\"\r\n                            }\r\n                        }}\r\n                        search={{\r\n                            value: toolBoxSearchValue,\r\n                            onChange: (e) => setToolBoxSearchValue(e.target.value)\r\n                        }}\r\n                        year={{\r\n                            key: \"toolboxYear\",\r\n                            id: \"dropdown-item-button\",\r\n                            title: \"Year\",\r\n                            data: [\r\n                                {\r\n                                    value: \"Any\",\r\n                                    default: true\r\n                                },\r\n                                {\r\n                                    value: \"2019\"\r\n                                },\r\n                                {\r\n                                    value: \"2020\"\r\n                                }\r\n                            ]\r\n                        }}\r\n                        type={{\r\n                            key: \"toolboxType\",\r\n                            id: \"dropdown-item-button\",\r\n                            title: \"Type\",\r\n                            data: [\r\n                                {\r\n                                    value: \"Any\",\r\n                                    default: true\r\n                                },\r\n                                {\r\n                                    value: \"Series\"\r\n                                },\r\n                                {\r\n                                    value: \"Movie\"\r\n                                },\r\n                                {\r\n                                    value: \"Episode\"\r\n                                }\r\n                            ]\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div\r\n            style={{\r\n                flexDirection: \"column\",\r\n                paddingRight: \"10%\",\r\n                paddingLeft: \"10%\"\r\n            }}\r\n        >\r\n            <h2 className={style_title}>Search result for <span style={{ color: \"goldenrod\" }}>{searchText}</span></h2>\r\n            {\r\n                searchedFilms && searchedFilms.length ?\r\n                    searchedFilms.map((film, filmIndex) => {\r\n                        return <FilmCard\r\n                            imdbID={film.imdbID}\r\n                            index={filmIndex}\r\n                            title={film.Title}\r\n                            image={film.Poster}\r\n                            content={film.Plot}\r\n                            imdbPoint={film.imdbRating}\r\n                            key={\"film-\"+filmIndex}\r\n                            year={film.Year}\r\n                            style={{\r\n                                marginLeft: 0,\r\n                                marginRight: 0\r\n                            }}\r\n                        />\r\n                    })\r\n                : err ? err.message : <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        paddingTop: 40,\r\n                        paddingBottom: 40,\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        alignItems: \"center\",\r\n                        fontFamily: 'Poppins'\r\n                    }}\r\n                >\r\n                    Yükleniyor...\r\n                </div>\r\n            }\r\n        </div>\r\n    </Layout>\r\n};\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}