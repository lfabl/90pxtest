{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport Layout from \"../../layout\";\nimport Breadcrumbs from '../../components/breadcrumbs';\nimport Toolbox from \"../../components/toolbox\";\nimport { title as style_title } from './index.module.css';\nimport { API_KEY, HOST } from \"../../constants\";\nimport { asyncForEach, getUrlVars } from \"../../helpers\";\nimport api from \"../../server\";\nimport FilmCard from \"../../components/filmCard\";\n\nconst Search = ({}) => {\n  const {\n    0: path,\n    1: setPath\n  } = useState(\"/\");\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState(\"\");\n  const {\n    0: toolBoxSearchValue,\n    1: setToolBoxSearchValue\n  } = useState(\"\");\n  const {\n    0: err,\n    1: setErr\n  } = useState(null);\n  const {\n    0: searchedFilms,\n    1: setSearchedFilms\n  } = useState([]);\n  const {\n    0: year,\n    1: setYear\n  } = useState(null);\n  const {\n    0: type,\n    1: setType\n  } = useState(null);\n  const {\n    0: updateSearch,\n    1: setUpdateSearch\n  } = useState(null);\n\n  const search = ({\n    s,\n    type,\n    y\n  }) => {\n    let mainParameters = {\n      apikey: API_KEY,\n      type: 'movie',\n      r: 'json',\n      s: s\n    };\n    if (type) mainParameters.type = type;\n    if (y) mainParameters.y = y;\n    const mainQuery = new URLSearchParams(mainParameters);\n    api({\n      url: HOST + '?' + mainQuery\n    }).then(async res => {\n      if (res.Response === 'True') {\n        let fullyData = [];\n        await asyncForEach(res.Search, async item => {\n          const itemParameters = {\n            apikey: API_KEY,\n            plot: 'short',\n            type: 'movie',\n            r: 'json',\n            i: item.imdbID\n          };\n          const itemQuery = new URLSearchParams(itemParameters);\n          const response = await api({\n            url: HOST + '?' + itemQuery\n          });\n          let itemData = JSON.parse(JSON.stringify(response));\n          fullyData.push(itemData);\n        });\n        setSearchedFilms(fullyData);\n        setSearchText(s);\n      } else {\n        setErr({\n          message: res['Error']\n        });\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  useEffect(() => {\n    setPath(window.location.pathname);\n\n    const _searchJSON = getUrlVars(window.location.href);\n\n    const _searchText = _searchJSON.s.replace(\"?s=\", \"\").replace(/%20/g, \" \");\n\n    setSearchText(_searchText);\n    let params = {\n      s: _searchText\n    };\n\n    if (_searchJSON.type) {\n      params.type = _searchJSON.type;\n      setType(_searchJSON.type);\n    }\n\n    if (_searchJSON.y) {\n      params.y = _searchJSON.y;\n      setYear(_searchJSON.y);\n    }\n\n    search(params);\n  }, []);\n  useEffect(() => {\n    setPath(window.location.pathname);\n  });\n  useEffect(() => {\n    if (updateSearch) search(updateSearch);\n  }, [updateSearch]);\n  useEffect(() => {\n    setUpdateSearch(null);\n  }, [searchedFilms]);\n  return __jsx(Layout, null, __jsx(Breadcrumbs, {\n    data: [{\n      title: \"Home\",\n      url: \"/\"\n    }, {\n      title: \"Search results for \" + searchText.toString(),\n      selected: true\n    }],\n    path: path\n  }), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      display: \"table\",\n      marginTop: 20,\n      marginBottom: 40\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"table-cell\"\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      paddingLeft: \"10%\",\n      paddingRight: \"10%\"\n    }\n  }, __jsx(Toolbox, {\n    position: \"relative\",\n    button: {\n      label: \"Search\",\n      props: {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => {\n          setUpdateSearch({\n            s: toolBoxSearchValue,\n            type: type,\n            y: year\n          });\n        }\n      }\n    },\n    search: {\n      value: toolBoxSearchValue,\n      onChange: e => setToolBoxSearchValue(e.target.value)\n    },\n    year: {\n      key: \"toolboxYear\",\n      id: \"dropdown-item-button\",\n      title: \"Year\",\n      value: year,\n      onChange: event => setYear(event.target.value),\n      data: [{\n        value: \"Any\",\n        default: true\n      }, {\n        value: \"2019\"\n      }, {\n        value: \"2020\"\n      }]\n    },\n    type: {\n      key: \"toolboxType\",\n      id: \"dropdown-item-button\",\n      title: \"Type\",\n      value: type,\n      onChange: event => setType(event.target.value),\n      data: [{\n        value: \"Any\",\n        default: true\n      }, {\n        value: \"Series\"\n      }, {\n        value: \"Movie\"\n      }, {\n        value: \"Episode\"\n      }]\n    }\n  })))), __jsx(\"h2\", {\n    className: style_title,\n    style: {\n      paddingRight: \"10%\",\n      paddingLeft: \"10%\"\n    }\n  }, \"Search result for \", __jsx(\"span\", {\n    style: {\n      color: \"goldenrod\"\n    }\n  }, searchText)), __jsx(\"div\", {\n    style: {\n      paddingRight: \"10%\",\n      paddingLeft: \"10%\",\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    }\n  }, searchedFilms && searchedFilms.length && updateSearch === null ? searchedFilms.map((film, filmIndex) => {\n    return __jsx(FilmCard, {\n      imdbID: film.imdbID,\n      index: filmIndex,\n      title: film.Title,\n      image: film.Poster,\n      content: film.Plot,\n      imdbPoint: film.imdbRating,\n      key: \"film-\" + filmIndex,\n      year: film.Year,\n      direction: \"column\",\n      style: {\n        marginLeft: 8,\n        marginRight: 8\n      }\n    });\n  }) : err ? err.message : __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      paddingTop: 40,\n      paddingBottom: 40,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      fontFamily: 'Poppins'\n    }\n  }, \"Y\\xFCkleniyor...\")));\n};\n\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}