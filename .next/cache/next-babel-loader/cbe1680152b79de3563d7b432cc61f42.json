{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport Layout from \"../../layout\";\nimport Breadcrumbs from '../../components/breadcrumbs';\nimport Toolbox from \"../../components/toolbox\";\nimport { title as style_title } from './index.module.css';\nimport { API_KEY, HOST } from \"../../constants\";\nimport { asyncForEach, getUrlVars } from \"../../helpers\";\nimport api from \"../../server\";\nimport FilmCard from \"../../components/filmCard\";\n\nvar Search = function Search(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _useState = useState(\"/\"),\n      path = _useState[0],\n      setPath = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      searchText = _useState2[0],\n      setSearchText = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      toolBoxSearchValue = _useState3[0],\n      setToolBoxSearchValue = _useState3[1];\n\n  var _useState4 = useState(null),\n      err = _useState4[0],\n      setErr = _useState4[1];\n\n  var _useState5 = useState([]),\n      searchedFilms = _useState5[0],\n      setSearchedFilms = _useState5[1];\n\n  var _useState6 = useState(null),\n      year = _useState6[0],\n      setYear = _useState6[1];\n\n  var _useState7 = useState(null),\n      type = _useState7[0],\n      setType = _useState7[1];\n\n  var _useState8 = useState(null),\n      updateSearch = _useState8[0],\n      setUpdateSearch = _useState8[1];\n\n  var search = function search(_ref2) {\n    var s = _ref2.s,\n        type = _ref2.type,\n        y = _ref2.y;\n    var mainParameters = {\n      apikey: API_KEY,\n      type: 'movie',\n      r: 'json',\n      s: s\n    };\n    if (type) mainParameters.type = type;\n    if (y) mainParameters.y = y;\n    var mainQuery = new URLSearchParams(mainParameters);\n    api({\n      url: HOST + '?' + mainQuery\n    }).then( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(res) {\n        var fullyData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(res.Response === 'True')) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                fullyData = [];\n                _context2.next = 4;\n                return asyncForEach(res.Search, /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item) {\n                    var itemParameters, itemQuery, response, itemData;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            itemParameters = {\n                              apikey: API_KEY,\n                              plot: 'short',\n                              type: 'movie',\n                              r: 'json',\n                              i: item.imdbID\n                            };\n                            itemQuery = new URLSearchParams(itemParameters);\n                            _context.next = 4;\n                            return api({\n                              url: HOST + '?' + itemQuery\n                            });\n\n                          case 4:\n                            response = _context.sent;\n                            itemData = JSON.parse(JSON.stringify(response));\n                            fullyData.push(itemData);\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n\n              case 4:\n                setSearchedFilms(fullyData);\n                setSearchText(s);\n                _context2.next = 9;\n                break;\n\n              case 8:\n                setErr({\n                  message: res['Error']\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }())[\"catch\"](function (err) {\n      alert(err.message);\n    });\n  };\n\n  useEffect(function () {\n    setPath(window.location.pathname);\n\n    var _searchJSON = getUrlVars(window.location.href);\n\n    var _searchText = _searchJSON.s.replace(\"?s=\", \"\").replace(/%20/g, \" \");\n\n    setSearchText(_searchText);\n    var params = {\n      s: _searchText\n    };\n\n    if (_searchJSON.type) {\n      params.type = _searchJSON.type;\n      setType(_searchJSON.type);\n    }\n\n    if (_searchJSON.y) {\n      params.y = _searchJSON.y;\n      setYear(_searchJSON.y);\n    }\n\n    search(params);\n  }, []);\n  useEffect(function () {\n    setPath(window.location.pathname);\n  });\n  useEffect(function () {\n    if (updateSearch) search(updateSearch);\n  }, [updateSearch]);\n  useEffect(function () {\n    setUpdateSearch(null);\n  }, [searchedFilms]);\n  return __jsx(Layout, null, __jsx(Breadcrumbs, {\n    data: [{\n      title: \"Home\",\n      url: \"/\"\n    }, {\n      title: \"Search results for \" + searchText.toString(),\n      selected: true\n    }],\n    path: path\n  }), __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      display: \"table\",\n      marginTop: 20,\n      marginBottom: 40\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"table-cell\"\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"flex\",\n      paddingLeft: \"10%\",\n      paddingRight: \"10%\"\n    }\n  }, __jsx(Toolbox, {\n    position: \"relative\",\n    button: {\n      label: \"Search\",\n      props: {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          setUpdateSearch({\n            s: toolBoxSearchValue,\n            type: type,\n            y: year\n          });\n        }\n      }\n    },\n    search: {\n      value: toolBoxSearchValue,\n      onChange: function onChange(e) {\n        return setToolBoxSearchValue(e.target.value);\n      }\n    },\n    year: {\n      key: \"toolboxYear\",\n      id: \"dropdown-item-button\",\n      title: \"Year\",\n      value: year,\n      onChange: function onChange(event) {\n        return setYear(event.target.value);\n      },\n      data: [{\n        value: \"Any\",\n        \"default\": true\n      }, {\n        value: \"2019\"\n      }, {\n        value: \"2020\"\n      }]\n    },\n    type: {\n      key: \"toolboxType\",\n      id: \"dropdown-item-button\",\n      title: \"Type\",\n      value: type,\n      onChange: function onChange(event) {\n        return setType(event.target.value);\n      },\n      data: [{\n        value: \"Any\",\n        \"default\": true\n      }, {\n        value: \"Series\"\n      }, {\n        value: \"Movie\"\n      }, {\n        value: \"Episode\"\n      }]\n    }\n  })))), __jsx(\"h2\", {\n    className: style_title,\n    style: {\n      paddingRight: \"10%\",\n      paddingLeft: \"10%\"\n    }\n  }, \"Search result for \", __jsx(\"span\", {\n    style: {\n      color: \"goldenrod\"\n    }\n  }, searchText)), __jsx(\"div\", {\n    style: {\n      paddingRight: \"10%\",\n      paddingLeft: \"10%\",\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    }\n  }, searchedFilms && searchedFilms.length && updateSearch === null ? searchedFilms.map(function (film, filmIndex) {\n    return __jsx(FilmCard, {\n      imdbID: film.imdbID,\n      index: filmIndex,\n      title: film.Title,\n      image: film.Poster,\n      content: film.Plot,\n      imdbPoint: film.imdbRating,\n      key: \"film-\" + filmIndex,\n      year: film.Year,\n      direction: \"column\",\n      style: {\n        marginLeft: 8,\n        marginRight: 8\n      }\n    });\n  }) : err ? err.message : __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      paddingTop: 40,\n      paddingBottom: 40,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      fontFamily: 'Poppins'\n    }\n  }, \"Y\\xFCkleniyor...\")));\n};\n\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}